<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Exception_Assembly_Is_Invalid" xml:space="preserve">
    <value>Assembly "{0}" is invalid.</value>
  </data>
  <data name="Exception_Validation_Argument_HasAttribute" xml:space="preserve">
    <value>Argument "{0}" must have an attribute of type "{1}".</value>
  </data>
  <data name="Exception_AutocropScale" xml:space="preserve">
    <value>Autocrop height or width must be greater than zero.</value>
  </data>
  <data name="Exception_Configuration_Section_Not_Found" xml:space="preserve">
    <value>The "{0}" configuration section does not exist.</value>
  </data>
  <data name="Exception_Config_Does_Not_Contain_Key" xml:space="preserve">
    <value>Configuration does not contain key "{0}".</value>
  </data>
  <data name="Exception_Destination_Too_Small" xml:space="preserve">
    <value>Destination is too small to accept "{0}".</value>
  </data>
  <data name="Exception_Validation_Argument_EndsWith" xml:space="preserve">
    <value>Argument "{0}" value must end with "{1}".</value>
  </data>
  <data name="Exception_File_Not_Found" xml:space="preserve">
    <value>File "{0}" was not found.</value>
  </data>
  <data name="Exception_FormatElement_Already_Exists" xml:space="preserve">
    <value>The FormatKeyword "{0}" already exists.</value>
  </data>
  <data name="Exception_FormatElement_Attribute_Required" xml:space="preserve">
    <value>Format keyword "{0}" attribute "{1}" is required.</value>
  </data>
  <data name="Exception_FormatElement_Does_Not_Exist" xml:space="preserve">
    <value>The FormatKeyword "{0}" does not exist.</value>
  </data>
  <data name="Exception_FormatElement_Is_Not_Valid" xml:space="preserve">
    <value>The FormatKeyword "{0}" is not valid.</value>
  </data>
  <data name="Exception_ImageHelper_Invalid_Height" xml:space="preserve">
    <value>Argument "{0}" must be less than or equal to the original image height.</value>
  </data>
  <data name="Exception_ImageHelper_Invalid_Plot" xml:space="preserve">
    <value>Argument "{0}" must have at least one property value set greater than '0'.</value>
  </data>
  <data name="Exception_ImageHelper_Invalid_Quality" xml:space="preserve">
    <value>Argument "{0}" must be between '0' and '100'.</value>
  </data>
  <data name="Exception_ImageHelper_Invalid_Resize_Height" xml:space="preserve">
    <value>Argument "{0}" must be greater than or equal to '0'.</value>
  </data>
  <data name="Exception_ImageHelper_Invalid_Resize_Width" xml:space="preserve">
    <value>Argument "{0}" must be greater than or equal to '0'.</value>
  </data>
  <data name="Exception_ImageHelper_Invalid_Width" xml:space="preserve">
    <value>Argument "{0}" must be less than or equal to the original image width.</value>
  </data>
  <data name="Exception_ImageHelper_Invalid_X" xml:space="preserve">
    <value>Argument "{0}" must be greater than or equal to '0' and less than the original image width.</value>
  </data>
  <data name="Exception_ImageHelper_Invalid_XWidth" xml:space="preserve">
    <value>Argument "{0}" must plot within the original image width.</value>
  </data>
  <data name="Exception_ImageHelper_Invalid_Y" xml:space="preserve">
    <value>Argument "{0}" must be greater than or equal to '0' and less than the original image height.</value>
  </data>
  <data name="Exception_ImageHelper_Invalid_YHeight" xml:space="preserve">
    <value>Argument "{0}" must plot within the original image height.</value>
  </data>
  <data name="Exception_Invalid_CData" xml:space="preserve">
    <value>Xml NodeType is not valid for CDATA.  Expecting text or cdata.</value>
  </data>
  <data name="Exception_Invalid_Size" xml:space="preserve">
    <value>Argument "{0}" must have width or height set to greater than '0'.</value>
  </data>
  <data name="Exception_Validation_Argument_IsType" xml:space="preserve">
    <value>Argument "{0}" must be of type "{1}".</value>
  </data>
  <data name="Exception_Validation_Argument_IsValue" xml:space="preserve">
    <value>Argument "{0}" has an invalid value.</value>
  </data>
  <data name="Exception_Validation_Argument_IsNotEmpty" xml:space="preserve">
    <value>Argument "{0}" cannot be empty.</value>
  </data>
  <data name="Exception_Validation_Argument_StartsWith" xml:space="preserve">
    <value>Argument "{0}" value must start with "{1}".</value>
  </data>
  <data name="Exception_Stream_IsCanRead" xml:space="preserve">
    <value>Argument "{0}" must be readable (CanRead=true).</value>
  </data>
  <data name="Exception_Stream_IsCanSeek" xml:space="preserve">
    <value>Argument "{0}" must be seekable (CanSeek=true).</value>
  </data>
  <data name="Exception_Stream_IsCanWrite" xml:space="preserve">
    <value>Argument "{0}" must be writable (CanWrite=true).</value>
  </data>
  <data name="Exception_Too_Many_Of_Attribute" xml:space="preserve">
    <value>Too many occurances of attribute "{0}".</value>
  </data>
  <data name="Exception_Too_Many_Pairs" xml:space="preserve">
    <value>Argument "{0}" contains more than one key value pair.</value>
  </data>
  <data name="Exception_Type_Must_Be_String" xml:space="preserve">
    <value>Property type must be of type String.</value>
  </data>
  <data name="Exception_Value_Too_Small" xml:space="preserve">
    <value>Argument "{0}" is too small to accept value.</value>
  </data>
  <data name="Value_Exception_ToString" xml:space="preserve">
    <value>{0}   --- End of inner exception stack trace ---{0}</value>
  </data>
  <data name="Exception_Validation_Argument_IsNotNull" xml:space="preserve">
    <value>Argument "{0}" cannot be null.</value>
  </data>
  <data name="Iniitialization_Convert_InvalidCastException" xml:space="preserve">
    <value>Argument '{0}' must be a valid '{1}' value.</value>
  </data>
  <data name="Initialization_Convert_ArgumentNullException" xml:space="preserve">
    <value>Argument '{0}' cannot be null.</value>
  </data>
  <data name="Initialization_Convert_FormatException" xml:space="preserve">
    <value>Argument '{0}' must be a valid format to convert to the desired '{1}' type.</value>
  </data>
  <data name="Initialization_Convert_OverflowException" xml:space="preserve">
    <value>Argument '{0}' must be a valid '{1}' value.</value>
  </data>
  <data name="Exception_Validation_Argument_IsEmail" xml:space="preserve">
    <value>Argument "{0}" is not a valid email.</value>
  </data>
  <data name="Exception_Validation_Argument_IsFSA" xml:space="preserve">
    <value>Argument "{0}" is not a valid FSA.</value>
  </data>
  <data name="Exception_Validation_Argument_IsLDU" xml:space="preserve">
    <value>Argument "{0}" is not a valid LDU.</value>
  </data>
  <data name="Exception_Validation_Argument_IsNumber" xml:space="preserve">
    <value>Argument "{0}" is not a valid number.</value>
  </data>
  <data name="Exception_Validation_Argument_IsPostalCode" xml:space="preserve">
    <value>Argument "{0}" is not a valid postal code.</value>
  </data>
  <data name="Exception_Validation_Argument_IsUri" xml:space="preserve">
    <value>Argument "{0}" is not a valid URI.</value>
  </data>
  <data name="Exception_Validation_Argument_IsValidPassword" xml:space="preserve">
    <value>Argument "{0}" is not a valid password.</value>
  </data>
  <data name="Exception_Validation_Argument_IsValidIndexPosition" xml:space="preserve">
    <value>Argument '{0}' must be a valid index position.</value>
  </data>
  <data name="Exception_Validation_Argument_IsEqual" xml:space="preserve">
    <value>Argument '{0}' must be equal to the specified validValue.</value>
  </data>
  <data name="Exception_SetOnce_AlreadySet" xml:space="preserve">
    <value>Property value has already been set and can only be initialized once.</value>
  </data>
  <data name="Exception_SetOnce_NotSet" xml:space="preserve">
    <value>Property value must be set before it can be retrieved.</value>
  </data>
  <data name="Exception_Validation_Argument_MaxRange" xml:space="preserve">
    <value>Argument "{0}" must be less than or equal to "{1}".</value>
  </data>
  <data name="Exception_Validation_Argument_MinRange" xml:space="preserve">
    <value>Argument "{0}" must be greater than or equal to "{1}".</value>
  </data>
  <data name="Exception_Validation_Argument_Range" xml:space="preserve">
    <value>Argument "{0}" must be greater than or equal to "{1}" and less than or equal to "{2}".</value>
  </data>
  <data name="Exception_Validation_Argument_IsNotEmptyOrWhitespace" xml:space="preserve">
    <value>Argument "{0}" cannot be null, empty or whitespace.</value>
  </data>
  <data name="Exception_Validation_Argument_IsNotNullOrEmpty" xml:space="preserve">
    <value>Argument "{0}" cannot be null or empty.</value>
  </data>
  <data name="Exception_Validation_Value_EndsWith" xml:space="preserve">
    <value>Value must end with "{0}".</value>
  </data>
  <data name="Exception_Validation_Value_IsEqual" xml:space="preserve">
    <value>Value is not equal.</value>
  </data>
  <data name="Exception_Validation_Value_IsNotEmptyOrWhitespace" xml:space="preserve">
    <value>Value cannot be null, empty or whitespace.</value>
  </data>
  <data name="Exception_Validation_Value_IsNotNull" xml:space="preserve">
    <value>Value cannot be null.</value>
  </data>
  <data name="Exception_Validation_Value_IsNotNullOrEmpty" xml:space="preserve">
    <value>Value cannot be null or empty.</value>
  </data>
  <data name="Exception_Validation_Value_IsValue" xml:space="preserve">
    <value>Value "{0}" is not valid.</value>
  </data>
  <data name="Exception_Validation_Value_MaxRange" xml:space="preserve">
    <value>Value must be less than or equal to "{0}".</value>
  </data>
  <data name="Exception_Validation_Value_MinRange" xml:space="preserve">
    <value>Value must be greater than or equal to "{0}".</value>
  </data>
  <data name="Exception_Validation_Value_Range" xml:space="preserve">
    <value>Value must be greater than or equal to "{0}" and less than or equal to "{1}".</value>
  </data>
  <data name="Exception_Validation_Value_StartsWith" xml:space="preserve">
    <value>Value must start with "{0}".</value>
  </data>
  <data name="Exception_Validation_Argument_IsAssignable" xml:space="preserve">
    <value>Argument "{0}" must be assignable to type "{1}".</value>
  </data>
  <data name="Exception_Validation_Argument_IsFalse" xml:space="preserve">
    <value>Argument "{0}" must be false.</value>
  </data>
  <data name="Exception_Validation_Argument_IsNotValue" xml:space="preserve">
    <value>Argument "{0}" is not a valid value.</value>
  </data>
  <data name="Exception_Validation_Argument_IsTrue" xml:space="preserve">
    <value>Argument "{0}" must be true.</value>
  </data>
  <data name="Exception_Validation_Value_HasAttribute" xml:space="preserve">
    <value>Value must have an attribute of type "{0}".</value>
  </data>
  <data name="Exception_Validation_Value_IsAssignable" xml:space="preserve">
    <value>Value type must be assignable from type "{0}".</value>
  </data>
  <data name="Exception_Validation_Value_IsEmail" xml:space="preserve">
    <value>Value "[0}" is not a valid email.</value>
  </data>
  <data name="Exception_Validation_Value_IsFalse" xml:space="preserve">
    <value>Value must be false.</value>
  </data>
  <data name="Exception_Validation_Value_IsFSA" xml:space="preserve">
    <value>Value "{0}" is not a valid FSA.</value>
  </data>
  <data name="Exception_Validation_Value_IsLDU" xml:space="preserve">
    <value>Value "{0}" is not a valid LDU.</value>
  </data>
  <data name="Exception_Validation_Value_IsNotValue" xml:space="preserve">
    <value>Value cannot be equal to "{0}".</value>
  </data>
  <data name="Exception_Validation_Value_IsNumber" xml:space="preserve">
    <value>Value "{0}" is not a number.</value>
  </data>
  <data name="Exception_Validation_Value_IsPostalCode" xml:space="preserve">
    <value>Value "{0}" is not a valid postal code.</value>
  </data>
  <data name="Exception_Validation_Value_IsTrue" xml:space="preserve">
    <value>Value must be true.</value>
  </data>
  <data name="Exception_Validation_Value_IsType" xml:space="preserve">
    <value>Value must be of type "{0}".</value>
  </data>
  <data name="Exception_Validation_Value_IsUri" xml:space="preserve">
    <value>Value "{0}" is not a valid URI.</value>
  </data>
  <data name="Exception_Validation_Value_IsValidPassword" xml:space="preserve">
    <value>Value does meet the password strength requirements.</value>
  </data>
  <data name="Exception_Validation_Argument_WithinRange" xml:space="preserve">
    <value>Argument  "{0}" is not within a valid range.</value>
  </data>
  <data name="Exception_Validation_Property_EndsWith" xml:space="preserve">
    <value>Property "{0}" value must end with "{1}".</value>
  </data>
  <data name="Exception_Validation_Property_HasAttribute" xml:space="preserve">
    <value>Property "{0}" must have an attribute of type "{1}".</value>
  </data>
  <data name="Exception_Validation_Property_IsAssignable" xml:space="preserve">
    <value>Property "{0}" must be assignable to type "{1}".</value>
  </data>
  <data name="Exception_Validation_Property_IsEmail" xml:space="preserve">
    <value>Property "{0}" is not a valid email.</value>
  </data>
  <data name="Exception_Validation_Property_IsEqual" xml:space="preserve">
    <value>Property '{0}' must be equal to the specified validValue.</value>
  </data>
  <data name="Exception_Validation_Property_IsFalse" xml:space="preserve">
    <value>Property "{0}" must be false.</value>
  </data>
  <data name="Exception_Validation_Property_IsFSA" xml:space="preserve">
    <value>Property "{0}" is not a valid FSA.</value>
  </data>
  <data name="Exception_Validation_Property_IsLDU" xml:space="preserve">
    <value>Property "{0}" is not a valid LDU.</value>
  </data>
  <data name="Exception_Validation_Property_IsNotEmpty" xml:space="preserve">
    <value>Property "{0}" cannot be empty.</value>
  </data>
  <data name="Exception_Validation_Property_IsNotEmptyOrWhitespace" xml:space="preserve">
    <value>Property "{0}" cannot be null, empty or whitespace.</value>
  </data>
  <data name="Exception_Validation_Property_IsNotNull" xml:space="preserve">
    <value>Property "{0}" cannot be null.</value>
  </data>
  <data name="Exception_Validation_Property_IsNotNullOrEmpty" xml:space="preserve">
    <value>Property "{0}" cannot be null or empty.</value>
  </data>
  <data name="Exception_Validation_Property_IsNotValue" xml:space="preserve">
    <value>Property "{0}" is not a valid value.</value>
  </data>
  <data name="Exception_Validation_Property_IsNumber" xml:space="preserve">
    <value>Property "{0}" is not a valid number.</value>
  </data>
  <data name="Exception_Validation_Property_IsPostalCode" xml:space="preserve">
    <value>Property "{0}" is not a valid postal code.</value>
  </data>
  <data name="Exception_Validation_Property_IsTrue" xml:space="preserve">
    <value>Property "{0}" must be true.</value>
  </data>
  <data name="Exception_Validation_Property_IsType" xml:space="preserve">
    <value>Property "{0}" must be of type "{1}".</value>
  </data>
  <data name="Exception_Validation_Property_IsUri" xml:space="preserve">
    <value>Property "{0}" is not a valid URI.</value>
  </data>
  <data name="Exception_Validation_Property_IsValidIndexPosition" xml:space="preserve">
    <value>Property '{0}' must be a valid index position.</value>
  </data>
  <data name="Exception_Validation_Property_IsValidPassword" xml:space="preserve">
    <value>Property "{0}" is not a valid password.</value>
  </data>
  <data name="Exception_Validation_Property_IsValue" xml:space="preserve">
    <value>Property "{0}" has an invalid value.</value>
  </data>
  <data name="Exception_Validation_Property_MaxRange" xml:space="preserve">
    <value>Property "{0}" must be less than or equal to "{1}".</value>
  </data>
  <data name="Exception_Validation_Property_MinRange" xml:space="preserve">
    <value>Property "{0}" must be greater than or equal to "{1}".</value>
  </data>
  <data name="Exception_Validation_Property_Range" xml:space="preserve">
    <value>Property "{0}" must be greater than or equal to "{1}" and less than or equal to "{2}".</value>
  </data>
  <data name="Exception_Validation_Property_StartsWith" xml:space="preserve">
    <value>Property "{0}" value must start with "{1}".</value>
  </data>
  <data name="Exception_Validation_Property_WithinRange" xml:space="preserve">
    <value>Property "{0}" is not within a valid range.</value>
  </data>
</root>